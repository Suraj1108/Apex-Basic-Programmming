This text file will teach you about the apex classes, variables, methods etc.


Apex Class Definition

		public class myOuterClass {
			// Additional myOuterClass code here
			class myInnerClass {
				// myInnerClass code here
			}
		}

	Note : 	We can use access modifiers as public, global. We do not have to use an access modifier in the inner class.
		We can also use OPTIONAL DEFINITION MODIFIERS as virtual, abstract and so on.

	Syntax:
		private | public | global
		[virtual | abstract | with sharing | without sharing]
		class ClassName [implements InterfaceNameList] [extends ClassName]
		{
			// The body of the class
		}

	Important Point:

		1: By default the class is considered as private
		2: If inner class is global then outer class must to be global.
		3: public class is visible to your application and namespace but the class defined with global keyword will be visible to All Apex Code.
		4: Virtual Definition modifiers declares that this class alloows extension and overrides.
		   You cannot override a method with the override keyword unless the class has been defined as virtual.
		5: The abstract definition modifier declares that this class contains abstract methods, that is, methods that only have their signature declared and no body defined.
		6: You cannot add an abstract method to a global class after the class has been uploaded in a Managed - Released package version.
		7: If the class in the Managed - Released package is virtual, the method that you can add to it must also be virtual and must have an implementation.
		8: You cannot override a public or protected virtual method of a global class of an installed managed package.
 

Class variables:

	Class variable can have modifiers like public, final, static. 

	Syntax: 
		[public | private | protected | global] [final] [static] data_type variable_name [= value]


Class Methods:

	Syntax:
		[public | private | protected | global] [override] [static] data_type method_name
		(input parameters)
		{
			// The body of the method
		}

	Note: You can only use override to override methods in classes that have been defined as virtual.

Passing Method Arguments by Value:

	Example: Passing Primitive Data Type Arguments
		
		public class PassPrimitiveTypeExample {
			public static void debugStatusMessage() {
				String msg = 'Original value';
				processString(msg);
				// The value of the msg variable didn't change; it is still the old value.
				System.assertEquals(msg, 'Original value');
			}
			public static void processString(String s) {
				s = 'Modified value';
			}
		}

	Example: Passing Non-Primitive Data Type Arguments

		public class PassNonPrimitiveTypeExample {
			public static void createTemperatureHistory() {
				List<Integer> fillMe = new List<Integer>();
				reference(fillMe);
				// The list is modified and contains five items as expected.
				System.assertEquals(fillMe.size(),5);
				
				List<Integer> createMe = new List<Integer>();
				referenceNew(createMe);
				// The list is not modified because it still points to the original list, not the new list that the method created.
				System.assertEquals(createMe.size(),0);
			}

			public static void reference(List<Integer> m) {
				// Add rounded temperatures for the last five days.
				m.add(70);
				m.add(68);
				m.add(75);
				m.add(80);
				m.add(82);
			}

			public static void referenceNew(List<Integer> m) {
				// Assign argument to a new List of five temperature values.
				m = new List<Integer>{55, 59, 62, 60, 63};
			}
		}


Using Constructors:

	A constructor is code that is invoked when an object is created from the class blueprint. You do not need to write a constructor for every class. 
	If a class does not have a user-defined constructor, an implicit, no-argument, public one is used.	
	It never has an explicit return type and it is not inherited by the object created from it.

	After you write the constructor for a class, you must use the new keyword in order to instantiate an object from that class, using that constructor

		Example:
			public class TestObject {
				// The no argument constructor
				public TestObject() {
					// more code here
				}
			}
	

		TestObject myTest = new TestObject();

	In Apex, a constructor can be overloaded, that is, there can be more than one constructor for a class, each having different parameters.

		Example:
			public class TestObject2 {
				private static final Integer DEFAULT_SIZE = 10;
				Integer size;

				//Constructor with no arguments
				public TestObject2() {
					this(DEFAULT_SIZE); // Using this(...) calls the one argument constructor
				}

				// Constructor with one argument
				public TestObject2(Integer ObjectSize) {
					size = ObjectSize;
				}
			}

		TestObject2 myObject1 = new TestObject2(42);
		TestObject2 myObject2 = new TestObject2();

	Every constructor that you create for a class must have a different argument list.

		Example:
			public class Leads {
				// First a no-argument constructor
				public Leads () {}

				// A constructor with one argument
				public Leads (Boolean call) {}
				
				// A constructor with two arguments
				public Leads (String email, Boolean call) {}

				// Though this constructor has the same arguments as the one above, they are in a different order, so this is legal
				public Leads (Boolean call, String email) {}
			}

Access Modifiers:

	Apex allows you to use the private, protected, public, and global access modifiers when defining methods and variables.While triggers and 
	anonymous blocks can also use these access modifiers, they are not as useful in smaller portions of Apex.

	Note: Interface methods have no access modifiers. They are always global.

		Syntax:		[(none)|private|protected|public|global] declaration


Static and Instance:

	In Apex, you can have static methods, variables, and initialization code. Apex classes can’t be static. You can also have instance methods, member 
	variables, and initialization code (which have no modifier), and local variables:

		Static methods, variables, or initialization code are associated with a class, and are only allowed in outer classes. When you declare
		a method or variable as static, it's initialized only once when a class is loaded. Static variables aren't transmitted as part of the
		view state for a Visualforce page.

		Instance methods, member variables, and initialization code are associated with a particular object and have no definition modifier.
		When you declare instance methods, member variables, or initialization code, an instance of that item is created with every object
		instantiated from the class.


Using Static Methods and Variables:

	You can only use static methods and variables with outer classes. Inner classes have no static methods or variables. A static method or variable 
	does not require an instance of the class in order to run.
	
	Static methods are generally used as utility methods and never depend on a particular instance member variable value. Because a static
	method is only associated with a class, it cannot access any instance member variable values of its class.

	Static variables are only static within the scope of the request. They’re not static across the server, or across the entire organization.

	Note:
		Class static variables cannot be accessed through an instance of that class. So if class C has a static variable S, and x is an instance of
		C, then x.S is not a legal expression.

		The same is true for instance methods: if M() is a static method then x.M() is not legal. Instead, your code should refer to those static
		identifiers using the class: C.S and C.M().

		If a local variable is named the same as the class name, these static methods and variables are hidden.


Using Instance Methods and Variables:
	
	Instance methods and member variables are used by an instance of a class, that is, by an object. Instance member variables are declared inside a class, 
	but not within a method. Instance methods usually use instance member variables to affect the behavior of the method.

	Example:
		public class Plotter {
			
			// This inner class manages the points
			class Point {
			Double x;
			Double y;
				Point(Double x, Double y) {
					this.x = x;
					this.y = y;
				}

				Double getXCoordinate() {
					return x;
				}
	
				Double getYCoordinate() {
					return y;
				}

			}

			List<Point> points = new List<Point>();
			
			public void plot(Double x, Double y) {
				points.add(new Point(x, y));
			}

		// The following method takes the list of points and does something with them	
			public void render() {
		
			}
		}

	You can use static initialization code to initialize static final variables and to declare any information that is static, such as a map of values.

	Example:
		public class MyClass {
			
			class RGB {
				Integer red;
				Integer green;
				Integer blue;
			
				RGB(Integer red, Integer green, Integer blue) {
					this.red = red;
					this.green = green;
					this.blue = blue;
				}
			}
	
		static Map<String, RGB> colorMap = new Map<String, RGB>();
			
			static {
				colorMap.put('red', new RGB(255, 0, 0));
				colorMap.put('cyan', new RGB(0, 255, 255));
				colorMap.put('magenta', new RGB(255, 0, 255));
				}
		}	
		
		
Apex Properties:

		An Apex property is similar to a variable, however, you can do additional things in your code to a property value before it is accessed or
		returned. Properties can be used in many different ways: they can validate data before a change is made; they can prompt an action when data
		is changed, such as altering the value of other member variables; or they can expose data that is retrieved from some othersource, such as 
		another class.

		Property definitions include one or two code blocks, representing a get accessor and a set accessor:
			• The code in a get accessor executes when the property is read.
			• The code in a set accessor executes when the property is assigned a new value.
	Syntax:

		Public class BasicClass {
	
		// Property declaration
			access_modifier return_type property_name {
				get {
					//Get accessor code block
				}
				set {
					//Set accessor code block
				}
			}
		}

	Example:

		public class BasicProperty {
			public integer prop {
				get { return prop; }
				set { prop = value; }
			}
		}

			//The following code segment calls the class above, exercising the get and set accessors:
			BasicProperty bp = new BasicProperty();
			bp.prop = 5; // Calls set accessor
			System.assert(bp.prop == 5); // Calls get accessor

Using Automatic Properties:

	Properties do not require additional code in their get or set accessor code blocks. Instead, you can leave get and set accessor code blocks
	empty to define an automatic property. Automatic properties allow you to write more compact code that is easier to debug and maintain.

	Example:
		public class AutomaticProperty {
			public integer MyReadOnlyProp { get; }
			public double MyReadWriteProp { get; set; }
			public string MyWriteOnlyProp { set; }
		}

		AutomaticProperty ap = new AutomaticProperty();
			ap.MyReadOnlyProp = 5; // This produces a compile error: not writable
			ap.MyReadWriteProp = 5; // No error
			System.assert(MyWriteOnlyProp == 5); // This produces a compile error: not readable

Using Static Properties:
	
	When a property is declared as static, the property's accessor methods execute in a static context. This means that the accessors do not have access
	to non-static member variables defined in the class

	Example:

		public class StaticProperty {
			public static integer StaticMember;
			public integer NonStaticMember;
			
			public static integer MyGoodStaticProp {
				get{return MyGoodStaticProp;}
			}

			// The following produces a system error
			// public static integer MyBadStaticProp { return NonStaticMember; }
				
			public integer MyGoodNonStaticProp {
				get{return NonStaticMember;}
			}
		}


		StaticProperty sp = new StaticProperty();

		// The following produces a system error: a static variable cannot be accessed through an object instance
		// sp.MyGoodStaticProp = 5;
		
		// The following does not produce an error
			StaticProperty.MyGoodStaticProp = 5;


Using Access Modifiers on Property Accessors:

	Property accessors can be defined with their own access modifiers. If an accessor includes its own access modifier, this modifier overrides the access 
	modifier of the property.

	Example:
		global virtual class PropertyVisibility {
			// X is private for read and public for write
			public integer X { private get; set; }

			// Y can be globally read but only written within a class
			global integer Y { get; public set; }

			// Z can be read within the class but only subclasses can set it
			public integer Z { get; protected set; }
		}



Extending a Class:

	A class that extends another class inherits all the methods and properties of the extended class. In addition, the extending class can override the 
	existing virtual methods by using the override keyword in the method definition. Overriding a virtual method allows youto provide a different implementation
	for an existing method. This means that the behavior of a particular method is different based on the object you’re calling it on. This is referred to 
	as polymorphism.

	Example:
		//The YellowMarker class extends the Marker class.
		public virtual class Marker {
			
			public virtual void write() {
				System.debug('Writing some text.');
			}

			public virtual Double discount() {
				return .05;
			}
		}


		// Extension for the Marker class
		public class YellowMarker extends Marker {

			public override void write() {
				System.debug('Writing some text using the yellow marker.');
			}
		}

		
			Marker obj1, obj2;
			obj1 = new Marker();
			// This outputs 'Writing some text.'
			obj1.write();

			obj2 = new YellowMarker();
			// This outputs 'Writing some text using the yellow marker.'
			obj2.write();

			// We get the discount method for free and can call it from the YellowMarker instance.
			Double d = obj2.discount();

		//To call the extra methods, the object type must be the extending class
	
		// Extension for the Marker class
		public class RedMarker extends Marker {
			public override void write() {
				System.debug('Writing some text in red.');
			}

			// Method only in this class
			public Double computePrice() {
			return 1.5;
			}

		}

			RedMarker obj = new RedMarker();
			// Call method specific to RedMarker only
			Double price = obj.computePrice();


Extend Class Example:

		// Top-level (outer) class must be public or global (usually public unless they contain a Web Service, then they must be global)
		
		public class OuterClass{
		
			// Static final variable (constant) – outer class level only
			private static final Integer MY_INT;

			// Non-final static variable - use this to communicate state across triggers within a single request)		
			public static String sharedState;

			// Static method - outer class level only
			public static Integer getInt(){ return MY_INT; }

			// Static initialization (can be included where the variable is defined)
			static  {
				MY_INT =2;
			}

			// Member variable for outer class
			private final String m;
			
			// Instance initialization block - can be done where the variable is declared, or in a constructor
			{
				m= 'a';
			}

			// Because no constructor is explicitly defined in this outer class, an implicit, no-argument, public constructor exists

			// Inner interface
			public virtual interface MyInterface{
				
				// No access modifier is necessary for interface methods - these are always public or global depending on the interface visibility
				void myMethod();
			}
			
			//Interface Extension
			Interface MySecondInterface extends MyInterface{
				
				Integer method2(Integer i);
			}
			
			// Inner class - because it is virtual it can be extended. This class implements an interface that, in turn, extends another interface.
			// Consequently the class must implement all methods.
			
			public virtual class InnerClass implements MySecondInterface {
				// Inner member variables
				private final String s;
				private final String s2;
				
				// Inner instance initialization block (this code could be located above)
				{
					this.s = 'x';
				}

				// Inline initialization (happens after the block above executes)
					private final Integer i = s.length();

				// Explicit no argument constructor
					InnerClass() {
						// This invokes another constructor that is defined later
							this('none');
					}

				// Constructor that assigns a final variable value
					public InnerClass(String s2) {
							this.s2 = s2;
					}

				// Instance method that implements a method from MyInterface. Because it is declared virtual it can be overridden by a subclass.
					public virtual void myMethod() { /* does nothing */ }
	
				// Implementation of the second interface method above. This method references member variables (with and without the "this" prefix)
					public Integer method2(Integer i) { return this.i + s.length(); }
			}

			// Abstract class (that subclasses the class above). No constructor is needed since parent class has a no-argument constructor
			public abstract class AbstractChildClass extends InnerClass {

				// Override the parent class method with this signature. Must use the override keyword
				public override void myMethod() { /* do something else */ }

				// Same name as parent class method, but different signature. This is a different method (displaying polymorphism) so it does not 
				need to use the override keyword
				protected void method2() {}

				// Abstract method - subclasses of this class must implement this method
				abstract Integer abstractMethod();
			}
			
			// Complete the abstract class by implementing its abstract method
			public class ConcreteChildClass extends AbstractChildClass {

			// Here we expand the visibility of the parent method - note that visibilit cannot be restricted by a sub-class
				public override Integer abstractMethod() { return 5; }
				}

			// A second sub-class of the original InnerClass
				public class AnotherChildClass extends InnerClass {
					AnotherChildClass(String s) {
					// Explicitly invoke a different super constructor than one with no arguments
					super(s);
					}
				}


			// Exception inner class
			public virtual class MyException extends Exception {
			
				// Exception class member variable
				public Double d;
				// Exception class constructor
				MyException(Double d) {
					this.d = d;
				}

				// Exception class method, marked as protected
				protected void doIt() {}
			}
	
			// Exception classes can be abstract and implement interfaces
			public abstract class MySecondException extends Exception implements MyInterface {
			}
		}



		